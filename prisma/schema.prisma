// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  OUNCE
  POUND
  GRAM
  KILOGRAM
  MILILITER
  LITER
  FLUID_OUNCE
  CUP
  PINT
  QUART
  GALLON
  TEASPOON
  TABLESPOON
  BAG
  CAN
  BOTTLE
  BOX
  PIECE
  SACK
  LOAVES
  BUNDLES
  PACKAGE
}

enum Status {
  GOOD
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum Category {
  FRIDGE
  PANTRY
  FREEZER
  SPICE_RACK
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        Int             @id @default(autoincrement())
  email     String          @unique
  username  String          @unique
  password  String
  houses    House[]
  recipes   Recipe[]
}

model House {
  id        Int             @id @default(autoincrement())
  userId    Int
  name      String
  address   String?
  storages  Storage[]

  user      User            @relation(fields: [userId], references: [id])
}

model Storage {
  id        Int             @id @default(autoincrement())
  houseId   Int
  name      String?
  type      Category
  stocks    Stock[]

  house     House           @relation(fields: [houseId], references: [id]) 
}

model Ingredient {
  id        Int             @id @default(autoincrement())
  name      String
  price     Int?
  stocks    Stock[]
  recipes   RecipeIngredient[]
}

model Stock {
  id            Int         @id @default(autoincrement())
  ingredientId  Int?
  storageId     Int
  custom_name   String?
  quantity      Float
  unit          Unit
  last_updated  DateTime    @default(now()) @updatedAt
  status        Status      @default(GOOD)
  category      Category 


  ingredient    Ingredient? @relation(fields: [ingredientId], references: [id])
  storage       Storage     @relation(fields: [storageId], references: [id])
  @@unique      ([ingredientId, storageId])
  @@unique      ([custom_name, storageId])  
}

model Recipe {
  id            Int         @id @default(autoincrement())
  userId        Int
  name          String
  description   String?
  difficulty    Difficulty
  prepTime      Int
  cookTime      Int
  downTime      Int?
  servings      Int

  user          User        @relation(fields: [userId], references: [id])
  ingredients   RecipeIngredient[]
  instructions  Instruction[]
  nutrition     Nutrition[]
}

model RecipeIngredient {
  id            Int         @id @default(autoincrement())
  recipeId      Int
  ingredientId  Int
  quantity      Float
  unit          Unit
  
  recipe        Recipe      @relation(fields: [recipeId], references: [id])
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])
}

model Instruction {
  id            Int         @id @default(autoincrement())
  recipeId      Int
  step          Int
  content       String
  
  recipe        Recipe      @relation(fields: [recipeId], references: [id])
}

model Nutrition {
  id            Int         @id @default(autoincrement())
  recipeId      Int
  name          String
  amount        Float
  unit          String

  recipe        Recipe      @relation(fields: [recipeId], references: [id])
}