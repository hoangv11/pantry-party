generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String   @unique
  password String
  houses   House[]
  Recipe   Recipe[]
}

model House {
  id       Int       @id @default(autoincrement())
  userId   Int
  name     String
  address  String?
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storages Storage[]
}

model Storage {
  id      Int      @id @default(autoincrement())
  houseId Int
  name    String?
  type    Category
  stocks  Stock[]
  house   House    @relation(fields: [houseId], references: [id], onDelete: Cascade)
}

model Ingredient {
  id               Int                @id @default(autoincrement())
  name             String
  price            Int?
  RecipeIngredient RecipeIngredient[]
  stocks           Stock[]
}

model Stock {
  ingredientId Int
  storageId    Int
  custom_name  String?
  quantity     Float
  unit         Unit
  last_updated DateTime   @default(now()) @updatedAt
  status       Status     @default(GOOD)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  storage      Storage    @relation(fields: [storageId], references: [id], onDelete: Cascade)

  @@id([ingredientId, storageId])
}

model Recipe {
  id                Int                 @id @default(autoincrement())
  userId            Int
  name              String
  description       String?
  difficulty        Difficulty
  postDate          DateTime            @default(now())
  prepTime          Int
  cookTime          Int
  downTime          Int?
  servings          Int
  rating            Int
  User              User                @relation(fields: [userId], references: [id])
  RecipeIngredient  RecipeIngredient[]
  RecipeInstruction RecipeInstruction[]
  RecipeNutrition   RecipeNutrition[]
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipeId     Int
  ingredientId Int
  quantity     Float
  unit         Unit
  name         String
  Ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  Recipe       Recipe     @relation(fields: [recipeId], references: [id])
}

model RecipeInstruction {
  id       Int    @id @default(autoincrement())
  recipeId Int
  step     Int
  content  String
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model RecipeNutrition {
  id       Int    @id @default(autoincrement())
  recipeId Int
  name     String
  amount   Float
  unit     String
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
}

enum Unit {
  OUNCE
  POUND
  GRAM
  KILOGRAM
  MILILITER
  LITER
  FLUID_OUNCE
  CUP
  PINT
  QUART
  GALLON
  TEASPOON
  TABLESPOON
  BAG
  CAN
  BOTTLE
  BOX
  PIECE
  SACK
  LOAVES
  BUNDLES
  PACKAGE
}

enum Status {
  GOOD
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum Category {
  FRIDGE
  PANTRY
  FREEZER
  SPICE_RACK
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
